@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@model IEnumerable<VIPS.Models.CSV>



<form asp-controller="CSV" asp-action="Upload" method="post" enctype="multipart/form-data">
    <input type="file" name="file" />
    <hr />
    <button type="submit">Upload</button>
</form>


@Html.ActionLink("Submit", "Submit", "CSV", null, new { @class = "btn btn-primary" })
@Html.ActionLink("OverWrite Submit", "OverWriteSubmit", "CSV", null, new { @class = "btn btn-primary" })
@Html.ActionLink("Export to Notepad", "ToNotepad", "CSV", null, new { @class = "btn btn-primary" })
@Html.ActionLink("Clear CSV", "ClearUpload", "CSV", null, new { @class = "btn btn-primary" })

@if (Model != null && Model.Any())
{
    <p>
        Total Number of Contracts: @ViewBag.Count
    </p>
    <p>
        New Number of Contracts:   @ViewBag.Duplicate
    </p>

    <button id="showAllButton">Show All Objects</button>
    <button id="showFilteredButton">Show Non-Duplicate Objects</button>

    <table class="table" id="objectTable">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.ContractID)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedOn)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ContractName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Owner)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StageName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.UpdatedOn)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.AgencyName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.City)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Department)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FacultyInitiator)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Year)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Error)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ErrorDescription)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Duplicate)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.ContractID)</td>
                    <td>@Html.DisplayFor(modelItem => item.CreatedOn)</td>
                    <td>@Html.DisplayFor(modelItem => item.ContractName)</td>
                    <td>@Html.DisplayFor(modelItem => item.Owner)</td>
                    <td>@Html.DisplayFor(modelItem => item.StageName)</td>
                    <td>@Html.DisplayFor(modelItem => item.UpdatedOn)</td>
                    <td>@Html.DisplayFor(modelItem => item.AgencyName)</td>
                    <td>@Html.DisplayFor(modelItem => item.City)</td>
                    <td>@Html.DisplayFor(modelItem => item.Department)</td>
                    <td>@Html.DisplayFor(modelItem => item.FacultyInitiator)</td>
                    <td>@Html.DisplayFor(modelItem => item.Year)</td>
                    <td>
                        @(item.Error ? "true" : "false")
                    </td>

                    <td>@Html.DisplayFor(modelItem => item.ErrorDescription)</td>
                    <td>
                        @(item.Duplicate ? "true" : "false")
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<table class="table" id="detailTable" style="display: none;>
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.ContractID)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CreatedOn)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ContractName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Owner)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StageName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UpdatedOn)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.AgencyName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Department)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FacultyInitiator)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Year)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Error)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ErrorDescription)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Duplicate)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.ContractID)</td>
                <td>@Html.DisplayFor(modelItem => item.CreatedOn)</td>
                <td>@Html.DisplayFor(modelItem => item.ContractName)</td>
                <td>@Html.DisplayFor(modelItem => item.Owner)</td>
                <td>@Html.DisplayFor(modelItem => item.StageName)</td>
                <td>@Html.DisplayFor(modelItem => item.UpdatedOn)</td>
                <td>@Html.DisplayFor(modelItem => item.AgencyName)</td>
                <td>@Html.DisplayFor(modelItem => item.City)</td>
                <td>@Html.DisplayFor(modelItem => item.Department)</td>
                <td>@Html.DisplayFor(modelItem => item.FacultyInitiator)</td>
                <td>@Html.DisplayFor(modelItem => item.Year)</td>
                <td>
                    @(item.Error ? "true" : "false")
                </td>

                <td>@Html.DisplayFor(modelItem => item.ErrorDescription)</td>
                <td>
                    @(item.Duplicate ? "true" : "false")
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    // Get all rows from the first table
    var rows = document.querySelectorAll('#objectTable tbody tr');

    // Add a click event listener to each row
    rows.forEach(function (row) {
        row.addEventListener('click', function () {
            // Reset the style of all rows
            rows.forEach(function (r) {
                r.style.backgroundColor = '';
            });

            // Highlight the selected row
            row.style.backgroundColor = '#cce5ff';

            // Get the data from the selected row
            var contractID = row.cells[0].innerText;
            var contractID = row.cells[0].innerText;
            // Add more variables for other columns as needed

            // Populate the second table with detailed information
            var detailTable = document.getElementById('detailTable');
            detailTable.innerHTML = '<tr><td>ContractID:</td><td>' + contractID + '</td></tr>';
            // Add more rows for other columns as needed

            // Show the second table
            detailTable.style.display = 'table';
        });
    });
</script>



@if (TempData["AlertMessage"] != null)
{
    <script>
        alert('@TempData["AlertMessage"]');
    </script>
}

