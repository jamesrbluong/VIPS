@{
    ViewData["Title"] = "Home Page";
}

<html>
<head>
    <script type="text/javascript" src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>

    <style type="text/css">
        #mynetwork {
            width: 1000px;
            height: 600px;
            border: 3px solid lightgray;
        }

        .sidebar{
            height: 100%; 
            width: 0; 
            position: fixed;
            z-index: 1;
            top: 0;
            right: 0;
            background-color: #999;
            overflow-x: hidden;
            padding-top: 60px;
            transition: 0.5s;
        }

            .sidebar a {
                padding: 8px 8px 8px 32px;
                text-decoration: none;
                font-size: 25px;
                color: #111;
                display: block;
                transition: 0.3s;
            }

            .sidebar a:hover {
                text-decoration: underline;
                    color: #6495ED;
            }

    </style>
</head>
<body>
    <div id="mynetwork">
    </div>

    <div id="sidebar" class="sidebar">
        <a href="#" id="sidebarName">#</a> 
    </div>


@*<script src="~/js/graph.js"></script>*@

 <script type="text/javascript">

        var options = {
        nodes:{
            fixed: true,
            shape: "circle",
            color: "rgba(216,191,216,1)"
        }
        };

  
        var nodes = new vis.DataSet([
            { id: 1, label: 'Node 1' },
            { id: 2, label: 'Node 2' },
            { id: 3, label: 'Node 3' },
            { id: 4, label: 'Node 4' },
            { id: 5, label: 'Node 5' }
        ]);

        var edges = new vis.DataSet([
            { from: 1, to: 3 },
            { from: 1, to: 2 },
            { from: 2, to: 4 },
            { from: 2, to: 5 }
        ]);

        var container = document.getElementById('mynetwork');

        var data = {
            nodes: nodes,
            edges: edges
        };

        var network = new vis.Network(container, data, options);


        network.on("click", neighbourhoodHighlight);


        network.on("selectNode", function (params) {
            var nodeId = params.nodes[0];
            var node = network.body.nodes[nodeId];
            network.moveTo({
                position: { x: node.x, y: node.y },
                animation:true
            });
            if (nodes.get(nodeId).hiddenLabel == undefined) {
                document.getElementById("sidebarName").innerHTML = nodes.get(nodeId).label;
            }
            else{
                document.getElementById("sidebarName").innerHTML = nodes.get(nodeId).hiddenLabel;
            }
            document.getElementById("sidebar").style.width = "500px";
        });

        network.on("deselectNode", function (params) {
            document.getElementById("sidebar").style.width = "0px";
        });

        var allNodes = nodes.get({ returnType: "Object" });
        var highlightActive = false;

        

        function neighbourhoodHighlight(params) {
            // if something is selected:
            if (params.nodes.length > 0) {
                highlightActive = true;
                var i, j;
                var selectedNode = params.nodes[0];
                var degrees = 1;

                // mark all nodes as hard to read.
                for (var nodeId in allNodes) {
                    allNodes[nodeId].color = "rgba(200,200,200,0.5)";
                    if (allNodes[nodeId].hiddenLabel === undefined) {
                        allNodes[nodeId].hiddenLabel = allNodes[nodeId].label;
                        allNodes[nodeId].label = undefined;
                    }
                }
                var connectedNodes = network.getConnectedNodes(selectedNode);
                var allConnectedNodes = [];


                // all first degree nodes get their own color and their label back
                for (i = 0; i < connectedNodes.length; i++) {
                    allNodes[connectedNodes[i]].color = "rgba(216,191,216,1)";
                    if (allNodes[connectedNodes[i]].hiddenLabel !== undefined) {
                        allNodes[connectedNodes[i]].label =
                            allNodes[connectedNodes[i]].hiddenLabel;
                        allNodes[connectedNodes[i]].hiddenLabel = undefined;
                    }
                }

                // the main node gets its own color and its label back.
                allNodes[selectedNode].color = "rgba(216,191,216,1)";
                if (allNodes[selectedNode].hiddenLabel !== undefined) {
                    allNodes[selectedNode].label = allNodes[selectedNode].hiddenLabel;
                    allNodes[selectedNode].hiddenLabel = undefined;
                }
            } else if (highlightActive === true) {
                // reset all nodes
                for (var nodeId in allNodes) {
                    allNodes[nodeId].color = "rgba(216,191,216,1)";
                    if (allNodes[nodeId].hiddenLabel !== undefined) {
                        allNodes[nodeId].label = allNodes[nodeId].hiddenLabel;
                        allNodes[nodeId].hiddenLabel = undefined;
                    }
                }
                highlightActive = false;
            }
            var updateArray = [];
            for (nodeId in allNodes) {
                if (allNodes.hasOwnProperty(nodeId)) {
                    updateArray.push(allNodes[nodeId]);
                }
            }
            nodes.update(updateArray);
        }


    </script>
</body>
</html>