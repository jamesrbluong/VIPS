@{
    Layout = "~/Views/Shared/_UploadLayout.cshtml";
}

@model IEnumerable<Common.Entities.CSV>

<form asp-controller="CSV" asp-action="UploadFile" method="post" enctype="multipart/form-data">
    <input type="file" name="file" />
    <hr />
    <button type="submit">Upload</button>
</form>


@if (Model != null && Model.Any())
{
    @Html.ActionLink("Submit", "Submit", "CSV", null, new { @class = "btn btn-primary" } )
    @Html.ActionLink("OverWrite Submit", "OverWriteSubmit", "CSV", null, new { @class = "btn btn-primary" } )
    @Html.ActionLink("Clear CSV", "ClearUpload", "CSV", null, new { @class = "btn btn-primary" })
    @Html.ActionLink("Export to CSV", "ToCSV", "CSV", null, new { @class = "btn btn-primary" })
    <h2>Detailed View</h2>
    
    <p>
        Total Number of Contracts: @ViewBag.Count
    </p>
    <p>
        New Number of Contracts:   @ViewBag.Duplicate
    </p>

    <button id="showAllButton">Show All Objects</button>
    <button id="showFilteredButton">Show New Contracts Only</button>

    <table class="custom-table" id="objectTable">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.ContractID)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedOn)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ContractName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Owner)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.UpdatedOn)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Department)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Year)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Error)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Duplicate)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.ContractID)</td>
                    <td>@Html.DisplayFor(modelItem => item.CreatedOn)</td>
                    <td>@Html.DisplayFor(modelItem => item.ContractName)</td>
                    <td>@Html.DisplayFor(modelItem => item.Owner)</td>
                    <td>@Html.DisplayFor(modelItem => item.UpdatedOn)</td>
                    <td>@Html.DisplayFor(modelItem => item.Department)</td>
                    <td>@Html.DisplayFor(modelItem => item.Year)</td>
                    <td>
                        @(item.Error ? "true" : "false")
                    </td>
                    <td>
                        @(item.Duplicate ? "true" : "false")
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.ContractID">Edit</a> |
                    </td>
                </tr>
            }
        </tbody>
    </table>

}
<div id="mynetwork" style="display: none;"></div>
<p id="response"></p>


<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script>
    $(document).ready(function () {
        // Attach click event handler to each row
        $("#objectTable tbody tr").click(function () {
            // Get the contractID from the clicked row
            var contractID = $(this).find("td:first-child").text().trim();

            // Call the showRowByContractID function with the contractID
            showRowByContractID1(contractID);
            showRowByContractID2(contractID);
            showRowByContractID3(contractID);
            showRowByContractID4(contractID);
            showRowByContractID5(contractID);
            showRowByContractID6(contractID);

            // Make an AJAX request to call ContractDetailView with the contract ID
            $.ajax({
                url: '/Contract/ContractDetailView/' + contractID,
                type: 'GET',
                success: function (response) {
                    // Optionally, you can handle the response here if needed
                    console.log(response);
                },
                error: function (error) {
                    console.error('Error fetching data:', error);
                }
            });
        });
    });
    @if (TempData["loadVisualization"] != null)
    {
        @Html.Raw(TempData["loadVisualization"])
        ;
    }
</script>


@if (TempData["AlertMessage"] != null)
{
    <script>
        alert('@TempData["AlertMessage"]');
    </script>
}